#!/usr/bin/env python3
"""
Cloud Deployment Setup Script

This script helps you set up the AI Event Scraper for cloud deployment.
It will guide you through the process of:
1. Setting up MongoDB Atlas
2. Configuring environment variables
3. Preparing for deployment
4. Testing the setup

Usage:
    python scripts/setup_cloud_deployment.py
"""

import os
import sys
import json
from pathlib import Path

def print_header(title):
    """Print a formatted header."""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print(f"{'='*60}")

def print_step(step, description):
    """Print a formatted step."""
    print(f"\nüìã Step {step}: {description}")
    print("-" * 40)

def get_user_input(prompt, default=None):
    """Get user input with optional default."""
    if default:
        response = input(f"{prompt} [{default}]: ").strip()
        return response if response else default
    else:
        return input(f"{prompt}: ").strip()

def create_env_file():
    """Create .env file with user input."""
    print_step(1, "Setting up environment variables")
    
    print("We'll create a .env file with your cloud configuration.")
    print("You can get these values from MongoDB Atlas and your OpenAI account.")
    
    # Get MongoDB Atlas connection string
    print("\nüîó MongoDB Atlas Setup:")
    print("1. Go to https://www.mongodb.com/atlas")
    print("2. Create a free account (no credit card required)")
    print("3. Create a free cluster (M0)")
    print("4. Create a database user")
    print("5. Whitelist your IP (or use 0.0.0.0/0 for anywhere)")
    print("6. Get your connection string")
    
    mongodb_uri = get_user_input("\nEnter your MongoDB Atlas connection string")
    
    # Get OpenAI API key
    print("\nü§ñ OpenAI API Setup:")
    print("1. Go to https://platform.openai.com/api-keys")
    print("2. Create a new API key")
    print("3. Copy the key (it starts with 'sk-')")
    
    openai_key = get_user_input("\nEnter your OpenAI API key")
    
    # Create .env file
    env_content = f"""# AI Event Scraper - Cloud Configuration
# Generated by setup script

# Environment
ENVIRONMENT=production

# Database Configuration
MONGODB_URI={mongodb_uri}
MONGODB_DATABASE=event_scraper

# AI Processing
OPENAI_API_KEY={openai_key}
OPENAI_MODEL=gpt-3.5-turbo
AI_BATCH_SIZE=20

# Performance Settings
MAX_CONCURRENT_REQUESTS=50
REQUEST_DELAY_SECONDS=0.5

# API Configuration
API_HOST=0.0.0.0
API_PORT=$PORT

# Security
SECRET_KEY=your_secret_key_here
JWT_SECRET_KEY=your_jwt_secret_key_here

# Logging
LOG_LEVEL=INFO

# Scraping Configuration
SCRAPING_ENABLED=true
SCRAPING_CITIES=New York,Los Angeles,Chicago,Houston,Phoenix
SCRAPING_LIMIT_PER_CITY=1000
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ Created .env file with your configuration")

def show_deployment_options():
    """Show deployment platform options."""
    print_step(2, "Choose your deployment platform")
    
    print("Here are your free tier deployment options:")
    print("\nüöÇ Railway (Recommended)")
    print("   - $5/month free credits")
    print("   - Automatic deployments from GitHub")
    print("   - Easy environment variable management")
    print("   - URL: https://railway.app")
    
    print("\nüé® Render")
    print("   - Free tier available")
    print("   - Automatic deployments")
    print("   - Built-in monitoring")
    print("   - URL: https://render.com")
    
    print("\n‚ö° Vercel")
    print("   - Free tier available")
    print("   - Serverless functions")
    print("   - Global CDN")
    print("   - URL: https://vercel.com")
    
    choice = get_user_input("\nWhich platform would you like to use? (railway/render/vercel)", "railway")
    
    if choice.lower() == "railway":
        show_railway_instructions()
    elif choice.lower() == "render":
        show_render_instructions()
    elif choice.lower() == "vercel":
        show_vercel_instructions()
    else:
        print("Invalid choice. Please run the script again.")

def show_railway_instructions():
    """Show Railway deployment instructions."""
    print_step(3, "Railway Deployment Instructions")
    
    print("üöÇ Deploying to Railway:")
    print("\n1. Go to https://railway.app")
    print("2. Sign up with your GitHub account")
    print("3. Click 'New Project'")
    print("4. Choose 'Deploy from GitHub repo'")
    print("5. Select your AI-EventScraper repository")
    print("6. Railway will automatically detect your Python app")
    print("7. Go to your project settings")
    print("8. Add these environment variables:")
    print("   - MONGODB_URI: (your MongoDB Atlas connection string)")
    print("   - OPENAI_API_KEY: (your OpenAI API key)")
    print("9. Your app will be available at https://your-app-name.railway.app")
    
    print("\nüìö Railway will automatically:")
    print("   - Build your Python application")
    print("   - Install dependencies from requirements.txt")
    print("   - Start your API server")
    print("   - Deploy on every git push")

def show_render_instructions():
    """Show Render deployment instructions."""
    print_step(3, "Render Deployment Instructions")
    
    print("üé® Deploying to Render:")
    print("\n1. Go to https://render.com")
    print("2. Sign up with your GitHub account")
    print("3. Click 'New +'")
    print("4. Choose 'Web Service'")
    print("5. Connect your GitHub repository")
    print("6. Select your AI-EventScraper repository")
    print("7. Configure the service:")
    print("   - Name: ai-event-scraper")
    print("   - Environment: Python 3")
    print("   - Build Command: pip install -r requirements.txt")
    print("   - Start Command: python api_server.py --host 0.0.0.0 --port $PORT")
    print("8. Add environment variables:")
    print("   - MONGODB_URI: (your MongoDB Atlas connection string)")
    print("   - OPENAI_API_KEY: (your OpenAI API key)")
    print("9. Click 'Create Web Service'")
    print("10. Your app will be available at https://ai-event-scraper.onrender.com")

def show_vercel_instructions():
    """Show Vercel deployment instructions."""
    print_step(3, "Vercel Deployment Instructions")
    
    print("‚ö° Deploying to Vercel:")
    print("\n1. Go to https://vercel.com")
    print("2. Sign up with your GitHub account")
    print("3. Click 'New Project'")
    print("4. Import your AI-EventScraper repository")
    print("5. Vercel will auto-detect your Python app")
    print("6. Add environment variables:")
    print("   - MONGODB_URI: (your MongoDB Atlas connection string)")
    print("   - OPENAI_API_KEY: (your OpenAI API key)")
    print("7. Click 'Deploy'")
    print("8. Your app will be available at https://ai-event-scraper.vercel.app")

def show_database_population():
    """Show database population instructions."""
    print_step(4, "Populate your cloud database")
    
    print("üóÑÔ∏è  After deployment, you'll need to populate your database:")
    print("\nOption 1: Fresh data collection")
    print("   python scripts/populate_cloud_db.py --sample-cities --limit 200")
    
    print("\nOption 2: All major cities")
    print("   python scripts/populate_cloud_db.py --all-major-cities --limit 500")
    
    print("\nOption 3: Specific cities")
    print("   python scripts/populate_cloud_db.py --cities 'New York,Los Angeles' --limit 100")
    
    print("\nOption 4: Generate sample data")
    print("   python scripts/migrate_to_cloud.py --sample 1000")

def show_testing_instructions():
    """Show testing instructions."""
    print_step(5, "Test your deployment")
    
    print("üß™ Test your deployed application:")
    print("\n1. Health check:")
    print("   curl https://your-app-url.railway.app/health")
    
    print("\n2. API documentation:")
    print("   Visit: https://your-app-url.railway.app/docs")
    
    print("\n3. Get statistics:")
    print("   curl https://your-app-url.railway.app/stats")
    
    print("\n4. Get events:")
    print("   curl https://your-app-url.railway.app/events?limit=5")
    
    print("\n5. Search events:")
    print("   curl https://your-app-url.railway.app/events/search?q=tech")

def main():
    """Main setup function."""
    print_header("AI Event Scraper - Cloud Deployment Setup")
    
    print("Welcome! This script will help you set up the AI Event Scraper for cloud deployment.")
    print("We'll use free tier services to keep costs at zero.")
    
    # Check if .env already exists
    if os.path.exists('.env'):
        overwrite = get_user_input("\n.env file already exists. Overwrite? (y/n)", "n")
        if overwrite.lower() != 'y':
            print("Skipping .env file creation.")
        else:
            create_env_file()
    else:
        create_env_file()
    
    show_deployment_options()
    show_database_population()
    show_testing_instructions()
    
    print_header("Setup Complete!")
    print("üéâ Your AI Event Scraper is ready for cloud deployment!")
    print("\nNext steps:")
    print("1. Deploy to your chosen platform")
    print("2. Populate your database with events")
    print("3. Test your deployment")
    print("4. Share your API with the world!")
    
    print("\nüìö For detailed instructions, see:")
    print("   - CLOUD_DEPLOYMENT.md")
    print("   - README.md")
    print("   - API_DOCUMENTATION.md")

if __name__ == "__main__":
    main()
